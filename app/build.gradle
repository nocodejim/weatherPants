// app/build.gradle
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    namespace 'com.example.weatherpants' // Important for resource linking
    compileSdk 34 // Target Android API level for compilation (Android 14)

    defaultConfig {
        applicationId "com.example.weatherpants"
        minSdk 24 // Minimum Android API level required to run (Android 7.0)
        targetSdk 34 // Target Android API level the app is tested against
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The getApiKey function (defined below) will provide the value.
        // Pass the property name you expect in local.properties.
        buildConfigField("String", "WEATHER_API_KEY", getApiKey("WEATHER_API_KEY"))
    }

    buildTypes {
        release {
            minifyEnabled false // Set to true for production builds to shrink code/resources
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // For release, ensure your API key handling is secure.
            // This will also use the getApiKey function. Ensure your release process
            // makes the key available if local.properties isn't part of release builds.
            buildConfigField("String", "WEATHER_API_KEY", getApiKey("WEATHER_API_KEY"))
        }
        debug {
             // Debug builds will use the key from local.properties via getApiKey.
             // The line in defaultConfig already covers this for debug builds,
             // but explicitly adding it here is also fine if you have different
             // debug-specific logic in the future. For now, it inherits.
             // If you needed a different key or logic for debug, you'd override here.
             // buildConfigField("String", "WEATHER_API_KEY", getApiKey("DEBUG_WEATHER_API_KEY"))
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
         viewBinding true // Enables easier view access
         buildConfig true // Enables access to BuildConfig fields like the API key
    }
} // End of android { ... } block

// Function to safely read API key from local.properties
// Ensure local.properties exists in the project root with:
// WEATHER_API_KEY="YOUR_ACTUAL_OPENWEATHERMAP_API_KEY"
def getApiKey(String propertyName) {
    Properties properties = new Properties()
    File localPropertiesFile = rootProject.file("local.properties") // Corrected to File type

    if (localPropertiesFile.exists()) {
        try {
            // Use a try-with-resources statement for the InputStream
            localPropertiesFile.withInputStream { stream ->
                properties.load(stream)
            }
            def apiKey = properties.getProperty(propertyName)

            if (apiKey != null && !apiKey.trim().isEmpty()) {
                // Successfully read the API key
                println("INFO: Using API Key for '" + propertyName + "' from local.properties.")
                return "\\\"" + apiKey.trim() + "\\\"" // Return quoted string for BuildConfig
            } else {
                // API key for the given propertyName is null or empty in local.properties
                println("WARNING: API Key for '" + propertyName + "' in local.properties is null or empty.")
            }
        } catch (Exception e) {
            // Error reading the local.properties file
            println("WARNING: Could not read local.properties file for API Key '" + propertyName + "'. Error: " + e.getMessage())
        }
    } else {
        // local.properties file does not exist
        println("WARNING: local.properties file not found in project root. Cannot read API Key '" + propertyName + "'.")
    }

    // Default placeholder if key is not found, empty, or file is missing/unreadable
    println("WARNING: Using default placeholder for API Key '" + propertyName + "'. The app may not function correctly.")
    return "\"DEFAULT_KEY_MISSING_OR_PROBLEMATIC\""
}

dependencies {
    // Core Android libraries
    implementation 'androidx.core:core-ktx:1.13.1' // Kotlin extensions
    implementation 'androidx.appcompat:appcompat:1.6.1' // Compatibility library
    implementation 'com.google.android.material:material:1.12.0' // Material Design components
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4' // Layout manager

    // Networking library (Volley is simple for basic requests)
    implementation 'com.android.volley:volley:1.2.1'

    // Testing libraries (Placeholders for good practice)
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}